// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  // relationMode = "prisma"
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Message {
  id        Int             @id @default(autoincrement())
  content   String
  sentTime  DateTime        @default(now())
  sender    String
  direction String
  thread    MessageThread   @relation(fields: [threadId], references: [id])
  threadId  Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}
model MessageThread {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    String // Should reference User.id
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id                   String               @id @default(cuid())
  name                 String?              @default("Anonymous")
  email                String               @unique
  emailVerified        DateTime?
  gender               String?
  description          String?
  linkedin             String?
  personal_site        String?
  image                String?
  resume               String?
  password             String? // only for database authentication
  accounts             Account[]
  sessions             Session[]
  assignedApplications Application[]
  passwordResetTokens  PasswordResetToken[]
  jobCollections       Job_Collection[]
  messageThreads       MessageThread[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job_Collection {
  id             String          @id @default(cuid())
  image          String?
  company        String
  title          String
  description    String?
  location       String
  employmentType String?
  datePosted     String?
  salaryRange    String?
  jobProviders   Job_Providers[]
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job_Providers {
  id          Int            @id @default(autoincrement())
  jobProvider String
  url         String
  jobId       String
  job         Job_Collection @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Application {
  application_id   Int      @id @default(autoincrement())
  company          String
  category         Category
  job_title        String
  job_info         String?
  track_link       String?
  position_code    String?
  type             Type
  term             Term
  year             Int
  location         String
  status           Status   @default(Applied)
  application_date DateTime @default(now())
  assignedToUserId String?  @db.VarChar(255)
  assignedToUser   User?    @relation(fields: [assignedToUserId], references: [id], onDelete: Cascade)
  updatedAt        DateTime? @updatedAt
}

enum Term {
  Fall
  Winter
  Spring
  Summer
}

enum Type {
  Full_Time
  Part_Time
  Internship
  Contract
  Temporary
  Freelance
}

enum Status {
  Applied
  Interview
  Offer
  Rejected
  Updating
}

enum Category {
  Software
  Hardware
  Accounting
  Accounting_Service
  Finance
  Risk_Management
  Marketing
  Sales
  Human_Resources
  Customer_Service
  Legal
  Education
  Engineering
  Healthcare
  Art_and_Design
  Data_Science
  Product_Management
  Operations
  Supply_Chain
  Manufacturing
  Quality_Assurance
  Research_and_Development
  IT_Support
  Public_Relations
  Real_Estate
  Construction
  Consulting
  Environmental
  Agriculture
  Hospitality
  Tourism
  Transportation
  Logistics
  Media_and_Communications
  Non_Profit
  Government
  Security
  Other
}
